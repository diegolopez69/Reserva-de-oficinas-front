{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext } from \"react\";\nimport { signInWithEmailAndPassword, signInWithPopup, createUserWithEmailAndPassword } from \"firebase/auth\";\nimport { auth, googleProvider, facebookProvider } from \"./../firebase\";\nimport { useApiRequest } from \".\";\nimport { UserContext } from \"../context\";\nconst operationTypes = {\n  oauth: \"oauth\",\n  authByPassAndEmail: \"authByPassAndEmail\",\n  signUpByPassAndEmail: \"signUpByPassAndEmail\"\n};\n\nconst getAuthHandler = operationType => {\n  if (operationType === operationTypes.signUpByPassAndEmail) return createUserWithEmailAndPassword;\n  return operationType === operationTypes.oauth ? signInWithPopup : signInWithEmailAndPassword;\n};\n/**\n * @description\n * Hook that aims to centralize authentication logic, it returns one single function\n * that will be used to\n * 1) Create users with password and email\n * 2) authenticate users by gmail and/or facebook account\n *\n * @param function createFn(entityToCreate)\n * @returns function handleAuthentication(operationType,provider || credentials)\n * * @param String operationType, one of the existint operation types in the object above\n * * @param Provider provider, either facebook or google provider\n * * @param Array cretendials = (user_email,user_password)\n */\n\n\nexport const useAuthentication = () => {\n  _s();\n\n  const {\n    postRequest\n  } = useApiRequest();\n  const {\n    setUserData\n  } = useContext(UserContext);\n\n  const handleAuthentication = (type, ...provider) => {\n    const handler = getAuthHandler(type);\n    return handler(auth, ...provider).then(({\n      user\n    }) => postRequest(\"user/auth\", user).then(res => {\n      setUserData(res.user);\n      return res.user;\n    }).catch(err => {\n      console.log(\"Error on api\", err);\n      throw new Error(err);\n    })).catch(err => {\n      console.log(\"Error from firebase: \", JSON.stringify(err));\n      throw new Error(err.code);\n    });\n  };\n\n  return {\n    handleAuthentication,\n    operationTypes,\n    providers: {\n      googleProvider,\n      facebookProvider\n    }\n  };\n};\n\n_s(useAuthentication, \"9Mfa5hOgBMHahKyHPqWRC7wivn8=\", false, function () {\n  return [useApiRequest];\n});","map":{"version":3,"sources":["/Users/diego/Documents/myservice/src/hooks/useAuthentication.js"],"names":["useContext","signInWithEmailAndPassword","signInWithPopup","createUserWithEmailAndPassword","auth","googleProvider","facebookProvider","useApiRequest","UserContext","operationTypes","oauth","authByPassAndEmail","signUpByPassAndEmail","getAuthHandler","operationType","useAuthentication","postRequest","setUserData","handleAuthentication","type","provider","handler","then","user","res","catch","err","console","log","Error","JSON","stringify","code","providers"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SACEC,0BADF,EAEEC,eAFF,EAGEC,8BAHF,QAIO,eAJP;AAKA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,gBAA/B,QAAuD,eAAvD;AAEA,SAASC,aAAT,QAA8B,GAA9B;AACA,SAASC,WAAT,QAA4B,YAA5B;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,KAAK,EAAE,OADc;AAErBC,EAAAA,kBAAkB,EAAE,oBAFC;AAGrBC,EAAAA,oBAAoB,EAAE;AAHD,CAAvB;;AAMA,MAAMC,cAAc,GAAIC,aAAD,IAAmB;AACxC,MAAIA,aAAa,KAAKL,cAAc,CAACG,oBAArC,EACE,OAAOT,8BAAP;AAEF,SAAOW,aAAa,KAAKL,cAAc,CAACC,KAAjC,GACHR,eADG,GAEHD,0BAFJ;AAGD,CAPD;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,MAAMc,iBAAiB,GAAG,MAAM;AAAA;;AACrC,QAAM;AAAEC,IAAAA;AAAF,MAAkBT,aAAa,EAArC;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAkBjB,UAAU,CAACQ,WAAD,CAAlC;;AAEA,QAAMU,oBAAoB,GAAG,CAACC,IAAD,EAAO,GAAGC,QAAV,KAAuB;AAClD,UAAMC,OAAO,GAAGR,cAAc,CAACM,IAAD,CAA9B;AACA,WAAOE,OAAO,CAACjB,IAAD,EAAO,GAAGgB,QAAV,CAAP,CACJE,IADI,CACC,CAAC;AAAEC,MAAAA;AAAF,KAAD,KACJP,WAAW,CAAC,WAAD,EAAcO,IAAd,CAAX,CACGD,IADH,CACSE,GAAD,IAAS;AACbP,MAAAA,WAAW,CAACO,GAAG,CAACD,IAAL,CAAX;AACA,aAAOC,GAAG,CAACD,IAAX;AACD,KAJH,EAKGE,KALH,CAKUC,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,GAA5B;AACA,YAAM,IAAIG,KAAJ,CAAUH,GAAV,CAAN;AACD,KARH,CAFG,EAYJD,KAZI,CAYGC,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCE,IAAI,CAACC,SAAL,CAAeL,GAAf,CAArC;AACA,YAAM,IAAIG,KAAJ,CAAUH,GAAG,CAACM,IAAd,CAAN;AACD,KAfI,CAAP;AAgBD,GAlBD;;AAoBA,SAAO;AACLd,IAAAA,oBADK;AAELT,IAAAA,cAFK;AAGLwB,IAAAA,SAAS,EAAE;AAAE5B,MAAAA,cAAF;AAAkBC,MAAAA;AAAlB;AAHN,GAAP;AAKD,CA7BM;;GAAMS,iB;UACaR,a","sourcesContent":["import { useContext } from \"react\";\nimport {\n  signInWithEmailAndPassword,\n  signInWithPopup,\n  createUserWithEmailAndPassword,\n} from \"firebase/auth\";\nimport { auth, googleProvider, facebookProvider } from \"./../firebase\";\n\nimport { useApiRequest } from \".\";\nimport { UserContext } from \"../context\";\n\nconst operationTypes = {\n  oauth: \"oauth\",\n  authByPassAndEmail: \"authByPassAndEmail\",\n  signUpByPassAndEmail: \"signUpByPassAndEmail\",\n};\n\nconst getAuthHandler = (operationType) => {\n  if (operationType === operationTypes.signUpByPassAndEmail)\n    return createUserWithEmailAndPassword;\n\n  return operationType === operationTypes.oauth\n    ? signInWithPopup\n    : signInWithEmailAndPassword;\n};\n\n/**\n * @description\n * Hook that aims to centralize authentication logic, it returns one single function\n * that will be used to\n * 1) Create users with password and email\n * 2) authenticate users by gmail and/or facebook account\n *\n * @param function createFn(entityToCreate)\n * @returns function handleAuthentication(operationType,provider || credentials)\n * * @param String operationType, one of the existint operation types in the object above\n * * @param Provider provider, either facebook or google provider\n * * @param Array cretendials = (user_email,user_password)\n */\n\nexport const useAuthentication = () => {\n  const { postRequest } = useApiRequest();\n  const { setUserData } = useContext(UserContext);\n\n  const handleAuthentication = (type, ...provider) => {\n    const handler = getAuthHandler(type);\n    return handler(auth, ...provider)\n      .then(({ user }) =>\n        postRequest(\"user/auth\", user)\n          .then((res) => {\n            setUserData(res.user);\n            return res.user;\n          })\n          .catch((err) => {\n            console.log(\"Error on api\", err);\n            throw new Error(err);\n          })\n      )\n      .catch((err) => {\n        console.log(\"Error from firebase: \", JSON.stringify(err));\n        throw new Error(err.code);\n      });\n  };\n\n  return {\n    handleAuthentication,\n    operationTypes,\n    providers: { googleProvider, facebookProvider },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}