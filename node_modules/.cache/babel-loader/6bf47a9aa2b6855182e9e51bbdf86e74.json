{"ast":null,"code":"var _jsxFileName = \"/Users/diego/Documents/myservice/src/components/screens/history/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { History } from '../../organisms';\nimport Calendar from 'tui-calendar';\n/* ES6 */\n\nimport Grid from '@material-ui/core/Grid';\nimport { BasicLayout } from \"../../layout\";\nimport { Divider } from '../../atoms';\nimport 'tui-calendar/dist/tui-calendar.css'; // If you use the default popups, use this.\n\nimport 'tui-date-picker/dist/tui-date-picker.css';\nimport 'tui-time-picker/dist/tui-time-picker.css';\nimport './index.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nexport const HistoryScreen = () => {\n  _s();\n\n  const [calendar, setCalendar] = useState(undefined);\n  useEffect(() => {\n    !calendar && setCalendar(new Calendar('#calendar-id', {\n      defaultView: 'month',\n      taskView: true,\n      useDetailPopup: true\n    }));\n    calendar && function () {\n      // This way be prevent a blue rectangle used by default for the library\n      calendar.on({\n        'beforeCreateSchedule': function (e) {\n          //console.log('beforeCreateSchedule', e);\n          e.guide.clearGuideElement();\n        }\n      }); // This way we assign values on the created calendar\n\n      calendar.createSchedules([{\n        id: '1',\n        calendarId: '0',\n        title: 'my 2',\n        category: 'time',\n        dueDateClass: '',\n        body: 'example of body',\n        start: '2021-10-18T22:30:00+09:00',\n        end: '2021-10-18T23:30:00+09:00',\n        isReadOnly: true\n      }, {\n        id: '2',\n        calendarId: '0',\n        title: 'second ',\n        body: 'example of body',\n        category: 'time',\n        dueDateClass: '',\n        start: '2021-10-18T17:30:00+09:00',\n        end: '2021-10-18T17:31:00+09:00',\n        isReadOnly: true // schedule is read-only\n\n      }]);\n    }();\n  }, [calendar]);\n\n  const nextMonth = () => {\n    console.log(calendar);\n    calendar.createSchedules([{\n      id: '1',\n      calendarId: '0',\n      title: 'my 2',\n      body: 'example of body',\n      category: 'time',\n      dueDateClass: '',\n      start: '2021-10-18T22:30:00+09:00',\n      end: '2021-10-19T02:30:00+09:00'\n    }, {\n      id: '2',\n      calendarId: '0',\n      title: 'second ',\n      category: 'time',\n      body: 'example of body',\n      dueDateClass: '',\n      start: '2021-10-18T17:30:00+09:00',\n      end: '2021-10-19T17:31:00+09:00',\n      isReadOnly: true // schedule is read-only\n\n    }]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(BasicLayout, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: \"history-container\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        container: true,\n        xs: 12,\n        sm: 12,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => nextMonth(),\n          children: \"Mayonesa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 12,\n          align: \"center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"calendar-container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"calendar-id\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 12,\n        children: [/*#__PURE__*/_jsxDEV(Divider, {\n          label: \"Resumen agenda\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 9\n        }, this), [1, 2, 3].map(value => /*#__PURE__*/_jsxDEV(History, {\n          data: value\n        }, value, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 34\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 3\n  }, this);\n};\n\n_s(HistoryScreen, \"DPfz1OAntA5xKIBGxa1qHModVY8=\");\n\n_c = HistoryScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"HistoryScreen\");","map":{"version":3,"sources":["/Users/diego/Documents/myservice/src/components/screens/history/index.js"],"names":["React","useEffect","useState","History","Calendar","Grid","BasicLayout","Divider","monthNames","HistoryScreen","calendar","setCalendar","undefined","defaultView","taskView","useDetailPopup","on","e","guide","clearGuideElement","createSchedules","id","calendarId","title","category","dueDateClass","body","start","end","isReadOnly","nextMonth","console","log","map","value"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {History} from '../../organisms';\nimport Calendar from 'tui-calendar'; /* ES6 */\nimport Grid from '@material-ui/core/Grid';\nimport { BasicLayout } from \"../../layout\";\nimport { Divider } from '../../atoms';\nimport 'tui-calendar/dist/tui-calendar.css';\n\n// If you use the default popups, use this.\nimport 'tui-date-picker/dist/tui-date-picker.css';\nimport 'tui-time-picker/dist/tui-time-picker.css';\n\nimport './index.scss';\n\nconst monthNames = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December'\n];\n\n\nexport const HistoryScreen = () =>  {\n  const [calendar, setCalendar] = useState(undefined); \n  \n  useEffect(() => {\n    !calendar && setCalendar(new Calendar('#calendar-id', {\n      defaultView: 'month',\n      taskView: true,\n      useDetailPopup: true,\n    }));\n    \n    calendar && function() {\n      // This way be prevent a blue rectangle used by default for the library\n      calendar.on({\n        'beforeCreateSchedule': function(e) {\n          //console.log('beforeCreateSchedule', e);\n          e.guide.clearGuideElement();\n        }\n      })\n      // This way we assign values on the created calendar\n      calendar.createSchedules([\n        {\n          id: '1',\n          calendarId: '0',\n          title: 'my 2',\n          category: 'time',\n          dueDateClass: '',\n          body: 'example of body',\n          start: '2021-10-18T22:30:00+09:00',\n          end: '2021-10-18T23:30:00+09:00',\n          isReadOnly: true\n        },\n        {\n          id: '2',\n          calendarId: '0',\n          title: 'second ',\n          body: 'example of body',\n          category: 'time',\n          dueDateClass: '',\n          start: '2021-10-18T17:30:00+09:00',\n          end: '2021-10-18T17:31:00+09:00',\n          isReadOnly: true    // schedule is read-only\n        }\n      ]);\n    }();\n  }, [calendar]);\n\n  const nextMonth = () => {\n    console.log(calendar);\n    calendar.createSchedules([\n      {\n        id: '1',\n        calendarId: '0',\n        title: 'my 2',\n        body: 'example of body',\n        category: 'time',\n        dueDateClass: '',\n        start: '2021-10-18T22:30:00+09:00',\n        end: '2021-10-19T02:30:00+09:00'\n      },\n      {\n        id: '2',\n        calendarId: '0',\n        title: 'second ',\n        category: 'time',\n        body: 'example of body',\n        dueDateClass: '',\n        start: '2021-10-18T17:30:00+09:00',\n        end: '2021-10-19T17:31:00+09:00',\n        isReadOnly: true    // schedule is read-only\n      }\n    ])\n  };\n\n  return (\n  <BasicLayout>\n    <Grid container className='history-container'>\n      <Grid item container xs={12} sm={12}>\n        <button onClick={() => nextMonth()}>Mayonesa</button>\n        <Grid item xs={12} sm={12} align='center'>\n        <div className='calendar-container'>\n          <div id='calendar-id'></div>\n        </div>\n        </Grid>\n      </Grid>\n      <Grid item xs={12} sm={12}>\n        <Divider label='Resumen agenda'/>\n        {\n          [1,2,3].map((value) => <History key={value} data={value}/>)\n        }\n      </Grid>\n    </Grid>\n  </BasicLayout>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}