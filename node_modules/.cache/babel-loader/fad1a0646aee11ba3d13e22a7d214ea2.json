{"ast":null,"code":"var _jsxFileName = \"/Users/diego/Documents/myservice/src/components/organisms/auto-complete/index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { TextField, CircularProgress } from \"@material-ui/core\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { useFetch, FETCHSTATES } from \"../../../hooks\";\nimport \"./index.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AutoCompleteField = ({\n  source,\n  label,\n  labelResolver,\n  dataSourceResolver,\n  onChange,\n  ...rest\n}) => {\n  _s();\n\n  const [data, status] = useFetch(source);\n  if (status === FETCHSTATES.loading || status === FETCHSTATES.error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loader-container\",\n    children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 7\n  }, this);\n  const options = dataSourceResolver(data);\n\n  const handleOnClose = (event, reason) => {\n    if (reason !== \"toggleInput\") onChange(event);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    options: options,\n    getOptionLabel: labelResolver,\n    onClose: handleOnClose,\n    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n      placeholder: label,\n      variant: \"outlined\",\n      onChange: onChange,\n      ...rest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AutoCompleteField, \"kZ9fyn7WeEDfDu5cmF6GvS9lbHY=\", false, function () {\n  return [useFetch];\n});\n\n_c = AutoCompleteField;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoCompleteField\");","map":{"version":3,"sources":["/Users/diego/Documents/myservice/src/components/organisms/auto-complete/index.js"],"names":["React","TextField","CircularProgress","Autocomplete","useFetch","FETCHSTATES","AutoCompleteField","source","label","labelResolver","dataSourceResolver","onChange","rest","data","status","loading","error","options","handleOnClose","event","reason","params"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,gBAApB,QAA4C,mBAA5C;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AAEA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,gBAAtC;AACA,OAAO,cAAP;;AAEA,OAAO,MAAMC,iBAAiB,GAAG,CAAC;AAChCC,EAAAA,MADgC;AAEhCC,EAAAA,KAFgC;AAGhCC,EAAAA,aAHgC;AAIhCC,EAAAA,kBAJgC;AAKhCC,EAAAA,QALgC;AAMhC,KAAGC;AAN6B,CAAD,KAO3B;AAAA;;AACJ,QAAM,CAACC,IAAD,EAAOC,MAAP,IAAiBV,QAAQ,CAACG,MAAD,CAA/B;AAEA,MAAIO,MAAM,KAAKT,WAAW,CAACU,OAAvB,IAAkCD,MAAM,KAAKT,WAAW,CAACW,KAA7D,EACE,oBACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA,2BACE,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAMF,QAAMC,OAAO,GAAGP,kBAAkB,CAACG,IAAD,CAAlC;;AAEA,QAAMK,aAAa,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvC,QAAIA,MAAM,KAAK,aAAf,EAA8BT,QAAQ,CAACQ,KAAD,CAAR;AAC/B,GAFD;;AAIA,sBACE,QAAC,YAAD;AACE,IAAA,OAAO,EAAEF,OADX;AAEE,IAAA,cAAc,EAAER,aAFlB;AAGE,IAAA,OAAO,EAAES,aAHX;AAIE,IAAA,WAAW,EAAGG,MAAD,iBACX,QAAC,SAAD,OACMA,MADN;AAEE,MAAA,WAAW,EAAEb,KAFf;AAGE,MAAA,OAAO,EAAC,UAHV;AAIE,MAAA,QAAQ,EAAEG,QAJZ;AAAA,SAKMC;AALN;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CAvCM;;GAAMN,iB;UAQYF,Q;;;KARZE,iB","sourcesContent":["import React from \"react\";\nimport { TextField, CircularProgress } from \"@material-ui/core\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n\nimport { useFetch, FETCHSTATES } from \"../../../hooks\";\nimport \"./index.scss\";\n\nexport const AutoCompleteField = ({\n  source,\n  label,\n  labelResolver,\n  dataSourceResolver,\n  onChange,\n  ...rest\n}) => {\n  const [data, status] = useFetch(source);\n\n  if (status === FETCHSTATES.loading || status === FETCHSTATES.error)\n    return (\n      <div className=\"loader-container\">\n        <CircularProgress />\n      </div>\n    );\n\n  const options = dataSourceResolver(data);\n\n  const handleOnClose = (event, reason) => {\n    if (reason !== \"toggleInput\") onChange(event);\n  };\n\n  return (\n    <Autocomplete\n      options={options}\n      getOptionLabel={labelResolver}\n      onClose={handleOnClose}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          placeholder={label}\n          variant=\"outlined\"\n          onChange={onChange}\n          {...rest}\n        />\n      )}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}