{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nexport const useValidation = formData => {\n  _s();\n\n  const textValidation = value => {\n    if (value && value.trim().length > 0) return {\n      state: false,\n      value\n    };\n    return {\n      state: true,\n      value\n    };\n  };\n\n  const confirmPassword = (password, {\n    value\n  }) => {\n    if (password === value) {\n      return {\n        state: false,\n        value\n      };\n    }\n\n    return {\n      state: true,\n      value\n    };\n  };\n\n  const confirmEmail = value => {\n    const reg = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n    return {\n      state: !reg.test(value),\n      value\n    };\n  };\n\n  const confirmNumber = value => {\n    return {\n      state: isNaN(value),\n      value\n    };\n  };\n\n  const finalValidation = value => {\n    for (let key in value) {\n      if (key !== 'submit') if (value[key].state || !value[key].value.trim().length) return {\n        state: true\n      };\n    }\n\n    return {\n      state: false\n    };\n  };\n\n  const validation = (state, type, value, field, optionalData) => {\n    switch (type) {\n      case 'TEXT':\n        state[field] = textValidation(value);\n        state.submit = finalValidation({ ...state\n        });\n        return { ...state\n        };\n\n      case 'CONFIRMPASSWORD':\n        state[field] = confirmPassword(value, optionalData);\n        state.submit = finalValidation({ ...state\n        });\n        return { ...state\n        };\n\n      case 'EMAIL':\n        state[field] = confirmEmail(value);\n        state.submit = finalValidation({ ...state\n        });\n        return { ...state\n        };\n\n      case 'NUMBER':\n        state[field] = confirmNumber(value);\n        state.submit = finalValidation({ ...state\n        });\n        return { ...state\n        };\n\n      default:\n        return { ...state\n        };\n    }\n  };\n\n  const initialStateModifier = value => {\n    const tempValue = { ...value\n    };\n\n    for (let key in tempValue) {\n      tempValue[key] = {\n        state: value[key],\n        value: ''\n      };\n    }\n\n    return tempValue;\n  };\n\n  const reducer = (state, {\n    type,\n    value,\n    field,\n    optionalData\n  }) => {\n    return { ...validation(state, type, value, field, optionalData)\n    };\n  };\n\n  const [state, dispatch] = useReducer(reducer, initialStateModifier({ ...formData,\n    submit: true\n  }));\n\n  const handleValidation = (type, value, field, optionalData) => dispatch({\n    type,\n    value,\n    field,\n    optionalData\n  });\n\n  return { ...state,\n    handleValidation\n  };\n};\n\n_s(useValidation, \"3Oxr/jwgj2hJxXZ8FJ2hnMMRyUE=\");\n\nexport default useValidation;","map":{"version":3,"sources":["/Users/diego/Documents/myservice/src/hooks/useValidation.js"],"names":["useReducer","useValidation","formData","textValidation","value","trim","length","state","confirmPassword","password","confirmEmail","reg","test","confirmNumber","isNaN","finalValidation","key","validation","type","field","optionalData","submit","initialStateModifier","tempValue","reducer","dispatch","handleValidation"],"mappings":"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","sourcesContent":["import {useReducer} from 'react';\n\nexport const useValidation = (formData) => {\n  const textValidation = (value) => {\n    if (value && value.trim().length > 0) return {state: false, value};\n    return {state: true, value};\n  };\n  const confirmPassword = (password, {value}) => {\n    if (password === value) {\n      return {state: false, value};\n    }\n    return {state: true, value};\n  };\n  const confirmEmail = (value) => {\n    const reg = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n    return {state: !reg.test(value), value};\n  };\n  const confirmNumber = (value) => {\n    return {state: isNaN(value), value};\n  };\n  const finalValidation = (value) => {\n    for (let key in value) {\n      if (key !== 'submit')\n        if (value[key].state || !value[key].value.trim().length)\n          return {state: true};\n    }\n    return {state: false};\n  };\n\n  const validation = (state, type, value, field, optionalData) => {\n    switch (type) {\n        case 'TEXT':\n        state[field] = textValidation(value);\n        state.submit = finalValidation({...state});\n        return {...state};\n      case 'CONFIRMPASSWORD':\n        state[field] = confirmPassword(value, optionalData);\n        state.submit = finalValidation({...state});\n        return {...state};\n      case 'EMAIL':\n        state[field] = confirmEmail(value);\n        state.submit = finalValidation({...state});\n        return {...state};\n      case 'NUMBER':\n        state[field] = confirmNumber(value);\n        state.submit = finalValidation({...state});\n        return {...state};\n      default:\n        return {...state};\n    }\n  };\n  const initialStateModifier = (value) => {\n    const tempValue = {...value};\n    for (let key in tempValue) {\n      tempValue[key] = {state: value[key], value: ''};\n    }\n    return tempValue;\n  };\n\n  const reducer = (state, {type, value, field, optionalData}) => {\n    return {...validation(state, type, value, field, optionalData)};\n  };\n  const [state, dispatch] = useReducer(\n    reducer,\n    initialStateModifier({...formData, submit: true}),\n  );\n\n  const handleValidation = (type, value, field, optionalData) =>\n    dispatch({type, value, field, optionalData});\n  return {...state, handleValidation};\n};\n\nexport default useValidation;\n"]},"metadata":{},"sourceType":"module"}