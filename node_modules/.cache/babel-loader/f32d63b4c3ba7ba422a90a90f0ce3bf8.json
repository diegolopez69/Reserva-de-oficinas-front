{"ast":null,"code":"var _jsxFileName = \"/Users/diego/Documents/myservice/src/components/screens/history/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { History } from '../../organisms';\nimport Calendar from 'tui-calendar';\n/* ES6 */\n\nimport Grid from '@material-ui/core/Grid';\nimport { BasicLayout } from \"../../layout\";\nimport { Divider } from '../../atoms';\nimport { useApiRequest } from '../../../hooks';\nimport 'tui-calendar/dist/tui-calendar.css'; // If you use the default popups, use this.\n\nimport 'tui-date-picker/dist/tui-date-picker.css';\nimport 'tui-time-picker/dist/tui-time-picker.css';\nimport './index.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monthNames = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\n\nDate.prototype.addHours = function (h) {\n  this.setTime(this.getTime() + h * 60 * 60 * 1000);\n  return this;\n};\n\nconst month = new Date();\nexport const HistoryScreen = () => {\n  _s();\n\n  const {\n    getRequest\n  } = useApiRequest();\n  const [calendar, setCalendar] = useState(undefined);\n  const [monthActivities, setMonthActivites] = useState([]);\n  const [dayActivities, setDayActivities] = useState([]);\n  useEffect(() => {\n    const getMonthSchedule = async () => {\n      const actualDate = new Date().toISOString().substring(0, 7);\n      const {\n        booking\n      } = await getRequest(`bookings/day/${actualDate}`);\n      const tempActivities = booking.map(book => {\n        var _book$title, _book$description;\n\n        return { ...book,\n          title: (_book$title = book === null || book === void 0 ? void 0 : book.title) !== null && _book$title !== void 0 ? _book$title : 'Titulo',\n          body: (_book$description = book === null || book === void 0 ? void 0 : book.description) !== null && _book$description !== void 0 ? _book$description : 'Descripcion',\n          start: new Date(book.bookingDate).toISOString(),\n          end: new Date(book.bookingDate).addHours(1).toISOString(),\n          isReadOnly: true,\n          calendarId: '0',\n          category: 'time',\n          duedateclass: ''\n        };\n      });\n      setMonthActivites(tempActivities);\n      calendar.createSchedules([...tempActivities]);\n    };\n\n    const getDaySchedule = async () => {\n      const actualDate = new Date().toISOString().substring(0, 10);\n      const {\n        booking\n      } = await getRequest(`bookings/day/${actualDate}`);\n      const tempActivities = booking.map(book => {\n        var _book$title2, _book$description2;\n\n        return { ...book,\n          title: (_book$title2 = book === null || book === void 0 ? void 0 : book.title) !== null && _book$title2 !== void 0 ? _book$title2 : 'Titulo',\n          body: (_book$description2 = book === null || book === void 0 ? void 0 : book.description) !== null && _book$description2 !== void 0 ? _book$description2 : 'Descripcion',\n          start: new Date(book.bookingDate).toISOString(),\n          end: new Date(book.bookingDate).addHours(1).toISOString(),\n          isReadOnly: true,\n          calendarId: '0',\n          category: 'time',\n          duedateclass: ''\n        };\n      });\n      setDayActivities(tempActivities);\n    };\n\n    !calendar && setCalendar(new Calendar('#calendar-id', {\n      defaultView: 'month',\n      taskView: true,\n      useDetailPopup: true\n    }));\n    calendar && async function () {\n      // This way be prevent a blue rectangle used by default for the library\n      calendar.on({\n        'beforeCreateSchedule': function (e) {\n          //console.log('beforeCreateSchedule', e);\n          e.guide.clearGuideElement();\n        }\n      });\n      await getMonthSchedule();\n      await getDaySchedule(); // This way we assign values on the created calendar\n    }();\n  }, [calendar]);\n\n  const nextMonth = () => {\n    console.log(calendar);\n    calendar.createSchedules([{\n      id: '1',\n      calendarid: '0',\n      title: 'my 2',\n      body: 'example of body',\n      category: 'time',\n      duedateclass: '',\n      start: '2021-10-18t22:30:00+09:00',\n      end: '2021-10-19t02:30:00+09:00'\n    }, {\n      id: '2',\n      calendarId: '0',\n      title: 'second ',\n      category: 'time',\n      body: 'example of body',\n      dueDateClass: '',\n      start: '2021-10-18T17:30:00+09:00',\n      end: '2021-10-19T17:31:00+09:00',\n      isReadOnly: true // schedule is read-only\n\n    }]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(BasicLayout, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: \"history-container\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        container: true,\n        xs: 12,\n        sm: 12,\n        justifyContent: \"center\",\n        align: \"left\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 10,\n          sm: 10,\n          align: \"center\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"agenda-title\",\n            children: \"Agenda\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 10,\n          sm: 10,\n          className: \"container-history-calendar\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [monthNames[month.getMonth()], \" \", month.getFullYear()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"calendar-container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"calendar-id\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 12,\n        children: [/*#__PURE__*/_jsxDEV(Divider, {\n          label: \"Resumen agenda\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 9\n        }, this), dayActivities.map(value => /*#__PURE__*/_jsxDEV(History, {\n          data: value\n        }, value.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 40\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 3\n  }, this);\n};\n\n_s(HistoryScreen, \"g3/R0X15K/dkKKkFO0JjGKI3r60=\", false, function () {\n  return [useApiRequest];\n});\n\n_c = HistoryScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"HistoryScreen\");","map":{"version":3,"sources":["/Users/diego/Documents/myservice/src/components/screens/history/index.js"],"names":["React","useEffect","useState","History","Calendar","Grid","BasicLayout","Divider","useApiRequest","monthNames","Date","prototype","addHours","h","setTime","getTime","month","HistoryScreen","getRequest","calendar","setCalendar","undefined","monthActivities","setMonthActivites","dayActivities","setDayActivities","getMonthSchedule","actualDate","toISOString","substring","booking","tempActivities","map","book","title","body","description","start","bookingDate","end","isReadOnly","calendarId","category","duedateclass","createSchedules","getDaySchedule","defaultView","taskView","useDetailPopup","on","e","guide","clearGuideElement","nextMonth","console","log","id","calendarid","dueDateClass","getMonth","getFullYear","value"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {History} from '../../organisms';\nimport Calendar from 'tui-calendar'; /* ES6 */\nimport Grid from '@material-ui/core/Grid';\nimport { BasicLayout } from \"../../layout\";\nimport { Divider } from '../../atoms';\nimport {useApiRequest} from '../../../hooks';\nimport 'tui-calendar/dist/tui-calendar.css';\n\n// If you use the default popups, use this.\nimport 'tui-date-picker/dist/tui-date-picker.css';\nimport 'tui-time-picker/dist/tui-time-picker.css';\n\nimport './index.scss';\n\nconst monthNames = [\n  'Enero',\n  'Febrero',\n  'Marzo',\n  'Abril',\n  'Mayo',\n  'Junio',\n  'Julio',\n  'Agosto',\n  'Septiembre',\n  'Octubre',\n  'Noviembre',\n  'Diciembre'\n];\n\nDate.prototype.addHours = function(h) {\n  this.setTime(this.getTime() + (h * 60 * 60 * 1000));\n  return this;\n}\nconst month = new Date();\n\nexport const HistoryScreen = () =>  {\n  const {getRequest} = useApiRequest();\n  const [calendar, setCalendar] = useState(undefined); \n  const [monthActivities, setMonthActivites] = useState([]);\n  const [dayActivities, setDayActivities] = useState([]);\n  \n  useEffect(() => {\n\n    const getMonthSchedule = async () => {\n      const actualDate = new Date().toISOString().substring(0, 7);\n      const {booking} = await getRequest(`bookings/day/${actualDate}`)\n      const tempActivities = booking.map((book) => {\n        return {\n          ...book,\n          title: book?.title ?? 'Titulo',\n          body: book?.description ?? 'Descripcion',\n          start: new Date(book.bookingDate).toISOString(),\n          end: new Date(book.bookingDate).addHours(1).toISOString(),\n          isReadOnly: true,\n          calendarId: '0',\n          category: 'time',\n          duedateclass: '',\n        };\n      });\n      setMonthActivites(tempActivities);\n      calendar.createSchedules([...tempActivities]);\n    };\n    \n    const getDaySchedule = async () => {\n      const actualDate = new Date().toISOString().substring(0, 10);\n      const {booking} = await getRequest(`bookings/day/${actualDate}`)\n      const tempActivities = booking.map((book) => {\n        return {\n          ...book,\n          title: book?.title ?? 'Titulo',\n          body: book?.description ?? 'Descripcion',\n          start: new Date(book.bookingDate).toISOString(),\n          end: new Date(book.bookingDate).addHours(1).toISOString(),\n          isReadOnly: true,\n          calendarId: '0',\n          category: 'time',\n          duedateclass: '',\n        };\n      });\n      setDayActivities(tempActivities);\n    };\n\n    !calendar && setCalendar(new Calendar('#calendar-id', {\n      defaultView: 'month',\n      taskView: true,\n      useDetailPopup: true,\n    }));\n    \n    calendar && async function() {\n      // This way be prevent a blue rectangle used by default for the library\n      calendar.on({\n        'beforeCreateSchedule': function(e) {\n          //console.log('beforeCreateSchedule', e);\n          e.guide.clearGuideElement();\n        }\n      })\n      await getMonthSchedule();\n      await getDaySchedule();\n      // This way we assign values on the created calendar\n      \n    }();\n  }, [calendar]);\n\n  const nextMonth = () => {\n    console.log(calendar);\n    calendar.createSchedules([\n      {\n        id: '1',\n        calendarid: '0',\n        title: 'my 2',\n        body: 'example of body',\n        category: 'time',\n        duedateclass: '',\n        start: '2021-10-18t22:30:00+09:00',\n        end: '2021-10-19t02:30:00+09:00'\n      },\n      {\n        id: '2',\n        calendarId: '0',\n        title: 'second ',\n        category: 'time',\n        body: 'example of body',\n        dueDateClass: '',\n        start: '2021-10-18T17:30:00+09:00',\n        end: '2021-10-19T17:31:00+09:00',\n        isReadOnly: true    // schedule is read-only\n      }\n    ])\n  };\n\n  return (\n  <BasicLayout>\n    <Grid container className='history-container'>\n      <Grid item container xs={12} sm={12} justifyContent=\"center\" align='left'>\n        <Grid item xs={10} sm={10} align='center'>\n          <h1 className='agenda-title'>Agenda</h1>\n        </Grid>\n        <Grid item xs={10} sm={10} className='container-history-calendar'>\n          <h1>{monthNames[month.getMonth()]} {month.getFullYear()}</h1>\n          <div className='calendar-container'>\n            <div id='calendar-id'></div>\n          </div>\n        </Grid>\n      </Grid>\n      <Grid item xs={12} sm={12}>\n        <Divider label='Resumen agenda'/>\n        {\n          dayActivities.map((value) => <History key={value.id} data={value}/>)\n        }\n      </Grid>\n    </Grid>\n  </BasicLayout>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}